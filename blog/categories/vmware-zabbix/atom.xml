<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: VMware,Zabbix | G1BS.0N]]></title>
  <link href="http://taishin.github.com/blog/categories/vmware-zabbix/atom.xml" rel="self"/>
  <link href="http://taishin.github.com/"/>
  <updated>2013-04-20T23:20:01+09:00</updated>
  <id>http://taishin.github.com/</id>
  <author>
    <name><![CDATA[taishin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zabbix2.0でESXiのVMごとに監視してみる(自動登録編)]]></title>
    <link href="http://taishin.github.com/blog/2013/02/09/zabbixde/"/>
    <updated>2013-02-09T22:01:00+09:00</updated>
    <id>http://taishin.github.com/blog/2013/02/09/zabbixde</id>
    <content type="html"><![CDATA[<p><a href="http://taishin.github.com/blog/2012/11/11/zabbixde/">前回</a>のやつは、データは自動で取ってくるけど、Zabbixへのホスト登録は手動でやらないといけなかったので、いまいちでした。なので、ZabbixのAPIを使って、自動登録するように変更しました。また、1日データが取得できなかったら、Zabbixから削除するようにしました。</p>

<p>あと、登録したホストをマップに展開してホストスクリーンで各VMのステータスが確認できるようにしてみました。</p>

<p><img src="http://taishin.github.com/images/zabbix-map.png" width="500"  alt="Zabbix Map">
<img src="http://taishin.github.com/images/zabbix-hostscreen.png" width="500" alt="Zabbix HostScreen"></p>

<p>コードはこんな感じです。
<div><script src='https://gist.github.com/4054887.js?file='></script>
<noscript><pre><code>#!/usr/bin/ruby

require 'rubygems'	
require 'rbvmomi'
require 'pp'


filepath = &quot;/tmp/vsphere/&quot;

begin
vim = RbVmomi::VIM.connect :host =&gt; ARGV[0], :user =&gt; ARGV[1], :password =&gt; ARGV[2], :insecure =&gt; true
rescue =&gt; exc
p exc
exit
end

#
# cennect datacenter
#
begin
dc = vim.serviceInstance.find_datacenter
rescue =&gt; exc
p exc
exit
end

#
# get Host state
#

host = dc.hostFolder.children.first.host.grep(RbVmomi::VIM::HostSystem).each do |h|

host = h.name.gsub(/:/,&quot;-&quot;)
begin
hfile = open(filepath + &quot;h_&quot; + host, &quot;w&quot;)
rescue =&gt; exc
p exc
exit
end
hfile.print &quot;host-Hostname:&quot;, h.name, &quot;\n&quot;
hfile.print &quot;host-Product:&quot;, h.summary.config.product.fullName, &quot;\n&quot;
hfile.print &quot;host-HardwareMode:&quot;, h.summary.hardware.model, &quot;\n&quot;
hfile.print &quot;host-CPUModel:&quot;, h.summary.hardware.cpuModel, &quot;\n&quot;
hfile.print &quot;host-CPUMHz:&quot;, h.summary.hardware.cpuMhz, &quot;\n&quot;
hfile.print &quot;host-CPUCore:&quot;, h.summary.hardware.numCpuCores, &quot;\n&quot;
hfile.print &quot;host-CPUUsage:&quot;, h.summary.quickStats.overallCpuUsage, &quot;\n&quot;
hfile.print &quot;host-TotalMemorySize:&quot;, h.summary.hardware.memorySize/1024/1024, &quot;\n&quot;
hfile.print &quot;host-MemoryUsage:&quot;, h.summary.quickStats.overallMemoryUsage, &quot;\n&quot;
hfile.print &quot;host-PowerState:&quot;, h.summary.runtime.powerState, &quot;\n&quot;
hfile.print &quot;host-MaintenanceMode:&quot;, h.summary.runtime.inMaintenanceMode, &quot;\n&quot;
   hfile.print &quot;host-Uptime:&quot;, h.summary.quickStats.uptime, &quot;\n&quot;
hfile.close
end

#
# get Datastore status
#
datastore = dc.datastore.grep(RbVmomi::VIM::Datastore).each do |d|
ds = d.name.gsub(/:/,&quot;-&quot;)
begin
dfile = open(filepath + &quot;d_&quot; + ds, &quot;w&quot;)
rescue =&gt; exc
p exc
exit
end
dfile.print &quot;ds-Name:&quot;, d.name, &quot;\n&quot;
dfile.print &quot;ds-Capacity:&quot;, d.summary.capacity, &quot;\n&quot;
dfile.print &quot;ds-FreeSpace:&quot;, d.summary.freeSpace, &quot;\n&quot;
dfile.print &quot;ds-VM:&quot;
vm = d.vm.grep(RbVmomi::VIM::VirtualMachine).each do |v|
dfile.print &quot;\&quot;&quot;, v.name, &quot;\&quot;&quot;, &quot; &quot;
end
dfile.print &quot;\n&quot;
dfile.close
end

#
# get VirtualMachin status
#
vs = dc.vmFolder.childEntity.grep(RbVmomi::VIM::VirtualMachine).each do |v|
vm = v.name.gsub(/:/,&quot;-&quot;)
begin
vfile = open(filepath + &quot;v_&quot; + vm, &quot;w&quot;)
rescue
p exc
exit
end
vfile.print &quot;vm-Name:&quot;, v.name, &quot;\n&quot;
vfile.print &quot;vm-ESXi:&quot;, v.runtime.host.name, &quot;\n&quot;
vfile.print &quot;vm-powerState:&quot;, v.summary.runtime.powerState, &quot;\n&quot;
vfile.print &quot;vm-guestFullName:&quot;, v.summary.guest.guestFullName, &quot;\n&quot;
vfile.print &quot;vm-HostName:&quot;, v.summary.guest.hostName, &quot;\n&quot;
vfile.print &quot;vm-IPAddress:&quot;, v.summary.guest.ipAddress, &quot;\n&quot;
vfile.print &quot;vm-VMwareTools:&quot;, v.summary.guest.toolsStatus, &quot;\n&quot;
vfile.print &quot;vm-maxCpuUsage:&quot;, v.summary.runtime.maxCpuUsage, &quot;\n&quot;
vfile.print &quot;vm-numCpu:&quot;, v.summary.config.numCpu, &quot;\n&quot;
vfile.print &quot;vm-overallCpuUsage:&quot;, v.summary.quickStats.overallCpuUsage, &quot;\n&quot;
vfile.print &quot;vm-memorySizeMB:&quot;, v.summary.config.memorySizeMB, &quot;\n&quot;
vfile.print &quot;vm-hostMemoryUsage:&quot;, v.summary.quickStats.hostMemoryUsage, &quot;\n&quot;
vfile.print &quot;vm-guestMemoryUsage:&quot;, v.summary.quickStats.guestMemoryUsage, &quot;\n&quot;
vfile.print &quot;vm-UncommittedStorage:&quot;, v.summary.storage.uncommitted, &quot;\n&quot;
vfile.print &quot;vm-UsedStorage:&quot;, v.summary.storage.committed, &quot;\n&quot;
vfile.print &quot;vm-UnsharedStorage:&quot;, v.summary.storage.unshared, &quot;\n&quot;
vfile.print &quot;vm-Uptime:&quot;, v.summary.quickStats.uptimeSeconds, &quot;\n&quot;
vfile.close
end

puts 0</code></pre></noscript></div>
</p>

<p>登録方法とかは<a href="http://taishin.github.com/blog/2012/11/11/zabbixde/">前回</a>と同じです。
ZabbixのURLを引数にしたので、vCenter登録時のマクロに</p>

<pre>
  - {$ZBX_URL} ： http://xx.xx.xx.xx/zabbix
</pre>


<p>を追加してください。</p>
]]></content>
  </entry>
  
</feed>
